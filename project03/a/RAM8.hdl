// This file is part of the materials accompanying the book
// "The Elements of Computing Systems" by Nisan and Schocken,
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out hold the value
 * stored at the memory location specified by address. If load=1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out after the next time step.)
 */

CHIP RAM8 {
    //the address is a 3 bit bus because that is how many bits are needed to specify the range of possible addresses
    //there are 8 registeres so the address can be 0,1,2,3,4,5,6,7
    //so in binary that is 0,1,10,11,100,101,110,111
    //you need 3 bits of space to specify the numbers 4 thru 7 which would be the last register
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here.
    //the purpose of dmux8way is to set the value of one output variable to true and all the rest of them to false
    //the address will match up to the position of the out put variable 0-7
    //if the address is 0 then loadA will be true
    //if the address is 111, seven in decimal, then loadH will be true
    DMux8Way(in=load, sel=address, a=loadA, b=loadB, c=loadC, d=loadD, e=loadE, f=loadF, g=loadG, h=loadH);

    Register(in=in, load=loadA, out=outA);
    Register(in=in, load=loadB, out=outB);
    Register(in=in, load=loadC, out=outC);
    Register(in=in, load=loadD, out=outD);
    Register(in=in, load=loadE, out=outE);
    Register(in=in, load=loadF, out=outF);
    Register(in=in, load=loadG, out=outG);
    Register(in=in, load=loadH, out=outH);

    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address, out=out);
}
